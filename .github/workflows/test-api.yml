name: Test Weather API

on:
  workflow_dispatch:
    inputs:
      location:
        description: 'Location to test weather API'
        required: true
        default: 'London'
      api_gateway_url:
        description: 'API Gateway URL (leave empty to auto-detect)'
        required: false

env:
  AWS_REGION: us-east-1

jobs:
  test-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API Gateway URL
        id: get_url
        run: |
          if [[ -n "${{ github.event.inputs.api_gateway_url }}" ]]; then
            API_URL="${{ github.event.inputs.api_gateway_url }}"
          else
            # Try to get from Terraform outputs
            cd infrastructure
            terraform init >/dev/null 2>&1 || true
            API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")

            if [[ -z "$API_URL" ]]; then
              # Try to find API Gateway from AWS
              API_ID=$(aws apigateway get-rest-apis --query 'items[?name==`weather-api`].id' --output text)
              if [[ -n "$API_ID" && "$API_ID" != "None" ]]; then
                API_URL="https://${API_ID}.execute-api.${{ env.AWS_REGION }}.amazonaws.com/prod"
              fi
            fi
          fi

          if [[ -z "$API_URL" ]]; then
            echo "❌ Could not determine API Gateway URL"
            exit 1
          fi

          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "Using API URL: $API_URL"

      - name: Test API with valid token
        run: |
          echo "Testing API with valid authorization..."

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer valid-api-key-123" \
            -H "Content-Type: application/json" \
            -d '{"location": "${{ github.event.inputs.location }}"}' \
            "${{ steps.get_url.outputs.api_url }}/weather")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)

          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"

          if [[ "$HTTP_CODE" == "200" ]]; then
            echo "✅ API test with valid token: SUCCESS"
          else
            echo "❌ API test with valid token: FAILED"
            exit 1
          fi

      - name: Test API with invalid token
        run: |
          echo "Testing API with invalid authorization..."

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer invalid-token" \
            -H "Content-Type: application/json" \
            -d '{"location": "${{ github.event.inputs.location }}"}' \
            "${{ steps.get_url.outputs.api_url }}/weather")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)

          echo "HTTP Status: $HTTP_CODE"
          echo "Response Body: $BODY"

          if [[ "$HTTP_CODE" == "403" || "$HTTP_CODE" == "401" ]]; then
            echo "✅ API test with invalid token: SUCCESS (correctly rejected)"
          else
            echo "❌ API test with invalid token: FAILED (should have been rejected)"
            exit 1
          fi

      - name: Check S3 for processed data
        run: |
          echo "Checking S3 bucket for processed weather data..."

          # Get bucket name
          BUCKET_NAME=$(aws s3 ls | grep weather-data-bucket | awk '{print $3}' | head -n1)

          if [[ -z "$BUCKET_NAME" ]]; then
            echo "❌ Could not find weather S3 bucket"
            exit 1
          fi

          echo "Found bucket: $BUCKET_NAME"

          # Wait a bit for processing
          sleep 30

          # Check for recent data
          TODAY=$(date +%Y/%m/%d)
          YESTERDAY=$(date -d "yesterday" +%Y/%m/%d)

          echo "Checking for data in S3..."
          aws s3 ls "s3://$BUCKET_NAME/weather-data/$TODAY/" --recursive || true
          aws s3 ls "s3://$BUCKET_NAME/weather-data/$YESTERDAY/" --recursive || true

      - name: Create test summary
        if: always()
        run: |
          echo "### 🧪 API Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Location:** ${{ github.event.inputs.location }}" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway URL:** ${{ steps.get_url.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Valid token authentication test" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Invalid token rejection test" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ S3 data processing check" >> $GITHUB_STEP_SUMMARY
