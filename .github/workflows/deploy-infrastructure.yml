name: Deploy AWS Weather Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-southeast-2
  TF_VERSION: '1.12.2'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./infrastructure
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./infrastructure
        run: terraform validate

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ github.event.inputs.environment }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init -backend-config="bucket=weather-notification-terraform-state-${{ env.ENVIRONMENT }}-bucket"

      - name: Terraform Plan
        working-directory: ./infrastructure
        run: |
          terraform plan -out=tfplan -var="environment=${{ env.ENVIRONMENT }}" \
            -var="weather_api_key=${{ secrets.WEATHER_API_KEY }}"
        env:
          TF_VAR_weather_api_key: ${{ secrets.WEATHER_API_KEY }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}

      - name: Terraform Apply
        working-directory: ./infrastructure
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        working-directory: ./infrastructure
        id: tf_outputs
        run: |
          echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "sqs_queue_url=$(terraform output -raw sqs_queue_url)" >> $GITHUB_OUTPUT

      - name: Update Deployment Summary
        run: |
          echo "### ğŸš€ Infrastructure Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway URL:** ${{ steps.tf_outputs.outputs.api_gateway_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ steps.tf_outputs.outputs.s3_bucket_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**SQS Queue:** ${{ steps.tf_outputs.outputs.sqs_queue_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can now deploy Lambda functions using the deploy-lambda workflow." >> $GITHUB_STEP_SUMMARY

      - name: Save outputs to file
        run: |
          mkdir -p outputs
          echo "API_GATEWAY_URL=${{ steps.tf_outputs.outputs.api_gateway_url }}" > outputs/infrastructure.env
          echo "S3_BUCKET_NAME=${{ steps.tf_outputs.outputs.s3_bucket_name }}" >> outputs/infrastructure.env
          echo "SQS_QUEUE_URL=${{ steps.tf_outputs.outputs.sqs_queue_url }}" >> outputs/infrastructure.env

      - name: Upload outputs artifact
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-outputs
          path: outputs/infrastructure.env
          retention-days: 30
