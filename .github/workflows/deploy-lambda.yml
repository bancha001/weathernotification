name: Deploy Lambda Functions

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/lambda/**'
      - '.github/workflows/deploy-lambda.yml'
  workflow_dispatch:
    inputs:
      functions:
        description: 'Functions to deploy (comma-separated: weather-fetcher,weather-processor,authorizer or all)'
        required: true
        default: 'all'
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-southeast-2
  PYTHON_VERSION: '3.13'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    strategy:
      matrix:
        function: [weather-fetcher, weather-processor, authorizer]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if function should be deployed
        id: should_deploy
        run: |
          FUNCTIONS_INPUT="${{ github.event.inputs.functions || 'all' }}"
          FUNCTION_NAME="${{ matrix.function }}"

          if [[ "$FUNCTIONS_INPUT" == "all" ]] || [[ "$FUNCTIONS_INPUT" == *"$FUNCTION_NAME"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

          # Check if function files changed (for push events)
          if [[ "${{ github.event_name }}" == "push" ]]; then
            if git diff --name-only HEAD^ HEAD | grep -q "src/lambda/$FUNCTION_NAME/"; then
              echo "deploy=true" >> $GITHUB_OUTPUT
            elif [[ "$FUNCTIONS_INPUT" == "all" ]]; then
              echo "deploy=true" >> $GITHUB_OUTPUT
            else
              echo "deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Setup Python
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies and package function
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          cd src/lambda/${{ matrix.function }}

          # Create a clean directory for packaging
          mkdir -p package

          # Install dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -t package/
          fi

          # Copy function code
          cp *.py package/

          # Create deployment package
          cd package
          zip -r ../${{ matrix.function }}.zip .

          # Verify package contents
          echo "Package contents:"
          unzip -l ../${{ matrix.function }}.zip

      - name: Deploy Lambda function
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          FUNCTION_NAME=""
          case "${{ matrix.function }}" in
            "weather-fetcher")
              FUNCTION_NAME="serverless-weather-notification-system-${{ env.ENVIRONMENT }}-weather-fetcher"
              ;;
            "weather-processor")
              FUNCTION_NAME="serverless-weather-notification-system-${{ env.ENVIRONMENT }}-weather-processor"
              ;;
            "authorizer")
              FUNCTION_NAME="serverless-weather-notification-system-${{ env.ENVIRONMENT }}-authorizer"
              ;;
          esac

          echo "Deploying function: $FUNCTION_NAME"

          # Check if function exists
          echo "Updating existing function..."
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://src/lambda/${{ matrix.function }}/${{ matrix.function }}.zip

      - name: Wait for function update to complete
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          FUNCTION_NAME=""
          case "${{ matrix.function }}" in
            "weather-fetcher")
              FUNCTION_NAME="serverless-weather-notification-system-${{ env.ENVIRONMENT }}-weather-fetcher"
              ;;
            "weather-processor")
              FUNCTION_NAME="serverless-weather-notification-system-${{ env.ENVIRONMENT }}-weather-processor"
              ;;
            "authorizer")
              FUNCTION_NAME="serverless-weather-notification-system-${{ env.ENVIRONMENT }}-authorizer"
              ;;
          esac

          echo "Waiting for function update to complete..."
          aws lambda wait function-updated --function-name $FUNCTION_NAME
          echo "Function $FUNCTION_NAME updated successfully!"

      - name: Test function
        if: steps.should_deploy.outputs.deploy == 'true' && matrix.function != 'weather-processor'
        run: |
          FUNCTION_NAME=""
          case "${{ matrix.function }}" in
            "weather-fetcher")
              FUNCTION_NAME="serverless-weather-notification-system-dev-weather-fetcher"
              TEST_PAYLOAD='{"body": "{\"city_name\":\"Melbourne\", \"country_code\":\"AU\"}"}'          
              ;;
            "authorizer")
              FUNCTION_NAME="serverless-weather-notification-system-dev-authorizer"
              TEST_PAYLOAD='{"authorizationToken":"Bearer valid-api-key-123","methodArn":"arn:aws:execute-api:ap-southest-2:123456789012:abcdef123/test/GET/request"}'
              ;;
          esac

          echo "Testing function: $FUNCTION_NAME"
          aws lambda invoke \
            --function-name $FUNCTION_NAME \
            --payload "$TEST_PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            response.json

          echo "Function response:"
          cat response.json

  deployment-summary:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "### 🚀 Lambda Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "✅ All Lambda functions deployed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some Lambda deployments failed. Check individual job logs." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed Functions:**" >> $GITHUB_STEP_SUMMARY
          echo "- Weather Fetcher Lambda" >> $GITHUB_STEP_SUMMARY
          echo "- Weather Processor Lambda" >> $GITHUB_STEP_SUMMARY
          echo "- Weather Authorizer Lambda" >> $GITHUB_STEP_SUMMARY
